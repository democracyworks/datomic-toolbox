[{:db/id #db/id[:db.part/db]
  :db/ident :transaction-test/one-value
  :db/valueType :db.type/uuid
  :db/cardinality :db.cardinality/one
  :db/doc "A one-cardinality value that happens to be a UUID."
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :transaction-test/many-value
  :db/valueType :db.type/uuid
  :db/cardinality :db.cardinality/many
  :db/doc "A many-cardinality value that happens to be a UUID."
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :transaction-test/one-ref
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "A one-cardinality value that is a ref"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :transaction-test/many-ref
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "A many-cardinality value that is a ref"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :transaction-test/one-ref-comp
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "A one-cardinality value that is a ref"
  :db/isComponent true
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :transaction-test/many-ref-comp
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "A many-cardinality value that is a ref"
  :db/isComponent true
  :db.install/_attribute :db.part/db}


 {:db/id #db/id [:db.part/user]
  :db/ident :transact
  :db/fn #db/fn
  {:lang "clojure"
   :params [db eid rel old-value new-value]
   :code (let [entity (d/entity db eid)
               relation (d/entity db rel)
               cardinality (:db/cardinality relation)
               type (:db/valueType relation)]
           (cond
             (and (= :db.cardinality/one cardinality)
                  (= :db.type/ref type))
             (cond
               (not= old-value (get-in entity [rel :db/id]))
               (throw (java.util.ConcurrentModificationException.
                       (str "old-value does not match existing value: "
                            "old-value: " (pr-str old-value) " "
                            "existing-value: " (pr-str (get entity rel)))))

               (= old-value new-value)
               []

               (nil? new-value)
               [[:db/retract eid rel old-value]]

               :else
               [[:db/add eid rel new-value]])

             (= :db.cardinality/one cardinality)
             (cond
               (not= old-value (get entity rel))
               (throw (java.util.ConcurrentModificationException.
                       (str "old-value does not match existing value: "
                            "old-value: " (pr-str old-value) " "
                            "existing-value: " (pr-str (get entity rel)))))

               (= old-value new-value)
               []

               (nil? new-value)
               [[:db/retract eid rel old-value]]

               :else
               [[:db/add eid rel new-value]])

             (= :db.cardinality/many cardinality)
             (cond
               (not= (not-empty (set old-value)) (get entity rel))
               (throw (java.util.ConcurrentModificationException.
                       "old-value does not match existing value"))
               :else
               (concat
                (for [val old-value
                      :when (not (contains? new-value val))]
                  [:db/retract eid rel val])
                (for [val new-value
                      :when (not (contains? old-value val))]
                  [:db/add eid rel val])))

             :else
             (throw (Exception.
                     (str "Unsupported cardinality: " cardinality)))))}}]
