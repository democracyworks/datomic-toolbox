[
 {:db/id #db/id [:db.part/user]
  :db/ident :transact
  :db/fn #db/fn
  {:lang "clojure"
   :params [db eid rel old-value new-value]
   :code (let [entity   (d/entity db eid)
               relation (d/entity db rel)
               ->set (fn [maybe-set]
                       (cond
                         (instance? java.util.Collection maybe-set) (set maybe-set)
                         (nil?  maybe-set) #{}
                         :else             #{maybe-set}))
               old-values (->set old-value)
               new-values (->set new-value)
               derefer (if (and (= :db.type/ref (:db/valueType relation))
                                (not (:db/isComponent relation)))
                         :db/id
                         identity)
               existing-values (map derefer (->set (get entity rel)))
               de-id (fn [e]
                       (if (instance? datomic.Entity e)
                         (into {} e)
                         e))]
           (when-not (= old-values (set (map de-id existing-values)))
             (throw (java.util.ConcurrentModificationException.
                     (str "old-values do not match existing values: "
                          "Info: "
                          "old-value: " (pr-str old-value) "; "
                          "old-values: " (pr-str old-values) "; "
                          "new-value: " (pr-str new-value) "; "
                          "new-values: " (pr-str new-values) "; "
                          "coll? " (instance? java.util.Collection old-value) "; "
                          "nil? " (nil? old-value) "; "
                          "type: " (type old-value)))))

           (concat
            (for [val existing-values
                  :when (not (contains? new-values (de-id val)))]
              (if (:db/isComponent relation)
                [:db.fn/retractEntity (:db/id val)]
                [:db/retract eid rel val]))
            (for [val new-values
                  :when (not (contains? old-values val))]
              {:db/id eid
               rel val})))}}

 {:db/id #db/id [:db.part/user]
  :db/ident :assert-empty
  :db/fn #db/fn
  {:lang "clojure"
   :params [db query & args]
   :code (let [result (apply d/q query
                             db
                             args)]
           (when (seq result)
             (throw (java.util.ConcurrentModificationException.
                     (str "assert-empty failed with non-empty results: "
                          "query: " (pr-str query) "; "
                          "args: " (pr-str args) "; "
                          "with results: " (pr-str result)))))

           [])}}

 {:db/id #db/id [:db.part/user]
  :db/ident :assert-equal
  :db/fn #db/fn
  {:lang "clojure"
   :params [db value eid rel]
   :code (let [->set (fn [maybe-set]
                       (cond
                         (instance? java.util.Collection maybe-set)
                         (set maybe-set)

                         (nil?  maybe-set)
                         #{}

                         :else
                         #{maybe-set}))
               entity (d/entity db eid)
               existing-value (get entity rel)]
           (when-not (= (->set existing-value) (->set value))
             (throw (java.util.ConcurrentModificationException.
                     (str "assert-equal failed with results: "
                          "value: " (pr-str value) "; "
                          "rel: " rel "; "
                          "existing value: " (pr-str existing-value) "."))))

           [])}}
 ]
